import{_ as s,c as i,o as e,ae as t}from"./chunks/framework.Cthp9TdA.js";const c=JSON.parse('{"title":"2023年","description":"","frontmatter":{},"headers":[],"relativePath":"record/2023.md","filePath":"record/2023.md"}'),n={name:"record/2023.md"};function r(l,a,h,o,p,k){return e(),i("div",null,a[0]||(a[0]=[t(`<h1 id="_2023年" tabindex="-1">2023年 <a class="header-anchor" href="#_2023年" aria-label="Permalink to &quot;2023年&quot;">​</a></h1><h2 id="_2023年4月" tabindex="-1">2023年4月 <a class="header-anchor" href="#_2023年4月" aria-label="Permalink to &quot;2023年4月&quot;">​</a></h2><h3 id="react初步学习" tabindex="-1">react初步学习 <a class="header-anchor" href="#react初步学习" aria-label="Permalink to &quot;react初步学习&quot;">​</a></h3><p><strong>高阶函数和函数的柯里化</strong></p><p><strong>高阶函数</strong>：</p><p>如果一个函数符合下面2个规范中的任何一个，那该函数就是高阶函数。</p><p>1.若A函数，接收的参数是一个函数，那么A就可以称之为高阶函数。</p><p>2.若A函数，调用的返回值依然是一个函数，那么A就可以称之为高阶函数。</p><p>常见的高阶函数有：Promise、setTimeout、arr.map()等等</p><p><strong>函数的柯里化:</strong></p><p>通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result);</span></span></code></pre></div><h2 id="_2023年5月" tabindex="-1">2023年5月 <a class="header-anchor" href="#_2023年5月" aria-label="Permalink to &quot;2023年5月&quot;">​</a></h2><h3 id="学习vue3-2后台管理系统搭建" tabindex="-1">学习vue3.2后台管理系统搭建 <a class="header-anchor" href="#学习vue3-2后台管理系统搭建" aria-label="Permalink to &quot;学习vue3.2后台管理系统搭建&quot;">​</a></h3><ul><li>动态路由</li><li>表格和弹窗等组件封装</li><li>svg组件</li></ul><p><a href="https://www.bilibili.com/video/BV1pq4y1c7oy/" target="_blank" rel="noreferrer">Vue3.2后台管理系统</a></p><h2 id="_2023年6月" tabindex="-1">2023年6月 <a class="header-anchor" href="#_2023年6月" aria-label="Permalink to &quot;2023年6月&quot;">​</a></h2><h3 id="token无感刷新" tabindex="-1">token无感刷新 <a class="header-anchor" href="#token无感刷新" aria-label="Permalink to &quot;token无感刷新&quot;">​</a></h3><h4 id="_1-双token机制" tabindex="-1">1. 双Token机制 <a class="header-anchor" href="#_1-双token机制" aria-label="Permalink to &quot;1. 双Token机制&quot;">​</a></h4><ul><li>‌<strong>Access Token（短效令牌</strong>‌：用于常规API请求认证，有效期较短（如15分钟至2小时），过期后需刷新。</li><li>‌<strong>Refresh Token（长效令牌</strong>‌：专用于刷新Access Token，有效期较长（如7天至30天），存储于安全位置（如HttpOnly Cookie）。</li><li>‌<strong>刷新流程</strong>‌：当Access Token过期时，前端用Refresh Token向服务端请求新Access Token，成功后更新本地存储并继续原请求。</li></ul><h4 id="_2-前端实现方案-推荐axios拦截器" tabindex="-1">2. 前端实现方案（推荐Axios拦截器） <a class="header-anchor" href="#_2-前端实现方案-推荐axios拦截器" aria-label="Permalink to &quot;2. 前端实现方案（推荐Axios拦截器）&quot;">​</a></h4><ul><li>‌<strong>请求拦截器</strong>‌：每次请求前检查Access Token是否即将过期（如剩余5分钟内），若是则触发刷新。</li><li>‌<strong>响应拦截器</strong>‌：捕获401状态码（Token过期），暂停并发请求，刷新Token后重试原请求。</li><li>‌<strong>防重复刷新</strong>‌：通过全局变量（如<code>isRefreshing</code>）标记刷新状态，避免并发请求多次触发刷新。</li><li>‌<strong>请求队列</strong>‌：刷新期间将新请求存入队列（<code>requests</code>数组），刷新完成后统一处理。</li></ul><h3 id="手写promise" tabindex="-1">手写promise <a class="header-anchor" href="#手写promise" aria-label="Permalink to &quot;手写promise&quot;">​</a></h3><h2 id="_2023年7月" tabindex="-1">2023年7月 <a class="header-anchor" href="#_2023年7月" aria-label="Permalink to &quot;2023年7月&quot;">​</a></h2><h3 id="websocket学习" tabindex="-1">WebSocket学习 <a class="header-anchor" href="#websocket学习" aria-label="Permalink to &quot;WebSocket学习&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noreferrer">WebSocket - Web API | MDN</a></p><p><a href="https://blog.csdn.net/Future_yzx/article/details/145359554" target="_blank" rel="noreferrer">WebSocket 心跳机制：确保连接稳定与实时性_websocket心跳机制-CSDN博客</a></p><h3 id="聊天室ui布局" tabindex="-1">聊天室ui布局 <a class="header-anchor" href="#聊天室ui布局" aria-label="Permalink to &quot;聊天室ui布局&quot;">​</a></h3><p><a href="https://gitee.com/kevin_chou" target="_blank" rel="noreferrer">凯文同学</a>/<a href="https://gitee.com/kevin_chou/qdpz" target="_blank" rel="noreferrer">前端铺子 - uniapp移动端</a></p><h2 id="_2023年8-9月" tabindex="-1">2023年8-9月 <a class="header-anchor" href="#_2023年8-9月" aria-label="Permalink to &quot;2023年8-9月&quot;">​</a></h2><h3 id="uniapp小兔鲜项目" tabindex="-1">uniapp小兔鲜项目 <a class="header-anchor" href="#uniapp小兔鲜项目" aria-label="Permalink to &quot;uniapp小兔鲜项目&quot;">​</a></h3><p><a href="https://www.bilibili.com/video/BV1Bp4y1379L/?share_source=copy_web&amp;vd_source=537352610c1ee99563b0ca48b81ad48c" target="_blank" rel="noreferrer">黑马程序员前端项目uniapp小兔鲜儿微信小程序项目视频教程，基于Vue3+Ts+Pinia+uni-app的最新组合技术栈开发的电商业务全流程</a></p>`,32)]))}const E=s(n,[["render",r]]);export{c as __pageData,E as default};
